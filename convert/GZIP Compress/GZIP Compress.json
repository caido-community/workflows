{

  "description": "Compresses data using GZIP",

  "edition": 2,

  "graph": {

    "edges": [

      {

        "source": {

          "exec_alias": "exec",

          "node_id": 0

        },

        "target": {

          "exec_alias": "exec",

          "node_id": 2

        }

      },

      {

        "source": {

          "exec_alias": "exec",

          "node_id": 2

        },

        "target": {

          "exec_alias": "exec",

          "node_id": 1

        }

      }

    ],

    "nodes": [

      {

        "alias": "convert_start",

        "definition_id": "caido/convert-start",

        "display": {

          "x": -10,

          "y": -100

        },

        "id": 0,

        "inputs": [],

        "name": "Convert Start",

        "version": "0.1.0"

      },

      {

        "alias": "convert_end",

        "definition_id": "caido/convert-end",

        "display": {

          "x": -20,

          "y": 190

        },

        "id": 1,

        "inputs": [

          {

            "alias": "data",

            "value": {

              "data": "$shell.data",

              "kind": "ref"

            }

          }

        ],

        "name": "Convert End",

        "version": "0.1.0"

      },

      {

        "alias": "shell",

        "definition_id": "caido/shell-cmd",

        "display": {

          "x": -20,

          "y": 10

        },

        "id": 2,

        "inputs": [

          {

            "alias": "shell",

            "value": {

              "data": "bash",

              "kind": "string"

            }

          },

          {

            "alias": "code",

            "value": {

              "data": "# Create temp file\ntmp_file=$(mktemp)\ntmp_out=$(mktemp)\ndebug_info=\"\"\ntrap 'rm -f \"$tmp_file\" \"$tmp_out\"' EXIT\n\n# Save input to file\ncat - > \"$tmp_file\"\n\n# Try Python's gzip module with configurable compression\npython3 - \"$tmp_file\" <<'EOF'\nimport sys\nimport gzip\nfrom io import BytesIO\n\ntry:\n    with open(sys.argv[1], 'rb') as f:\n        data = f.read()\n        \n    # Compress with highest speed setting\n    compressed = gzip.compress(data, compresslevel=1)\n    sys.stdout.buffer.write(compressed)\n    sys.exit(0)\n\nexcept Exception as e:\n    print(f\"Error during compression: {e}\", file=sys.stderr)\n    sys.exit(1)\nEOF\n\n# If Python script failed, try gzip command\nif [ $? -ne 0 ]; then\n    if gzip -c -1 \"$tmp_file\" > \"$tmp_out\" 2>/dev/null; then\n        cat \"$tmp_out\"\n        exit 0\n    else\n        echo \"Failed to compress data\"\n        exit 1\n    fi\nfi\n",

              "kind": "string"

            }

          },

          {

            "alias": "init",

            "value": {

              "data": "",

              "kind": "string"

            }

          },

          {

            "alias": "timeout",

            "value": {

              "data": 5000,

              "kind": "integer"

            }

          },

          {

            "alias": "data",

            "value": {

              "data": "$convert_start.data",

              "kind": "ref"

            }

          }

        ],

        "name": "Shell",

        "version": "0.1.0"

      }

    ]

  },

  "id": "gzip-compress-workflow",

  "kind": "convert",

  "name": "GZIP Compress"

}
